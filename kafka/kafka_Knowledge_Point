1.为什么kafka消息发送的吞吐量很高?
	a) kafka每次写入操作都只是把数据写入到操作系统的页缓存中，由操作系统自己把页缓存中的数据写回磁盘。
	   操作系统页缓存是在内存中分配，消息写入速度非常快。
	b) kafka写入操作采用追加方式，只能在日志文件末尾追加写入新的消息，且不允许修改已写入的消息，
	   而磁盘顺序访问操作速度可与内存的随即访问相媲美。
	所以kafka消息发送的吞吐量很高。
	
2.为什么kafka消费端高吞吐量、低延迟?
	kafka在读取消息时会首先尝试从OS的页缓存中读取，如果命中便把消息经页缓存直接发送到网络的socket上。

3.为什么kafka可以达到高吞吐量、低延迟？
	a) 大量使用操作系统页缓存，内存操作速度快且命中率高
	b) Kafka不直接参与物理I/O操作，而是交由最擅长此事的操作系统来完成
	c) 采用追加写入方式，摒弃了缓慢地磁盘随机读/写操作
	d) 使用以sendfile为代表的零拷贝技术加强网络间的数据传输效率

4.kafka持久化消息且持久化到磁盘上的有哪些好处？
a) 解耦消息发送与消息消费
   生产者不再需要直接和消费者方耦合，只是简单地把消息生产出来并交由Kafka服务器保存即可，因此提升了吞吐量
b) 实现灵活的消息处理
   对于消息重演，消息持久化可以很方便地实现这样的需求

5.kafka持久化设计新颖之处是什么？
   普通的系统在实现持久化时可能会先尽量使用内存，当内存资源耗尽时，再一次性地把数据持久化；
   而kafka则相反，所有数据都会立即被写入文件系统的持久化日志中，之后kafka服务器才会返回结果给客户端通知它们消息已被成功写入。
   这样做既实时保存了数据，有减少了kafka程序对于内存的消耗，从而将节省出的内存留给页缓存使用，更进一步地提升了整体性能。

6.kafka的为什么推荐Linux操作系统？
a) 当前Linux服务器数量最多
b) I/O模型的使用
	kafka的clients在设计底层网络库时采用Java的Selector机制，在Linux上的实现机制是epoll,
	而windows平台上，Java NIO的Selector机制底层是select模型而非异步IO，只有Java NIO2才使用异步IO。
	通常认为epoll比select模型高级，epoll就是加强版的select，取消轮询机制，取而代之回调机制。
	当socket较多时可以避免很多无意义的CPU时间浪费，理论上epoll对socket数无限制。
c) 数据网络传输效率
	kafka这种应用必然需要大量地通过网络与磁盘进行数据传输，而大部分这样的操作都是通过Java的FileChannel.transferTo
	方法实现的。在Linux平台上该方法底层回调用sendfile系统调用，即采用了Linux提供的零拷贝技术。
	而windows平台提供了TransmitFile函数来支持零拷贝技术，但是直到Java 8u60版本Window平台才正式让FileChannel的transferTo方法调用函数。
	
7.Java版本producer的工作原理是什么？
    首先，producer使用一个线程（用户主线程，也就是用户启动producer的线程）将待发送的消息封装进一个ProducerRecord类实例，
    然后，将其序列化之后发送给partitioner，
    然后，由partitioner确定了目标分区后一同发送到位于producer程序中的一块内存缓冲区中。
而producer的另一个工作线程（I/O发送线程，也称Sender线程）则负责实时的从该缓冲区提取出准备就绪的消息封装进一个批次（batch）,统一发送给对应的broker。

8.为什么producer使用结束时要做close()操作？
    producer程序启动后，用户主线程就可以将待发送消息封装、序列化、发送到producer程序中的一块内存缓冲区中，
    同时也会创建一个后台线程即Sender线程从消息缓冲池中读取消息封装进一个批次中发送给broker。
    当主线程快速地停掉时，就可能会发生数据丢失的情况，因为Sender线程还没来得及把消息缓冲池中的消息全发出去。
    而close()就可以在给定的时间（默认很长）里继续发送消息给broker。
    Spring整合的kafka的API，也是在容器销毁实例时调用producer的close()方法，当然在每次producer.send()后也会关闭，
    但close()方法是空方法，因为producer是单例的，要复用这个producer当然不能真的关闭。
    
9.batch.size参数怎么理解？
   batch.size是producer最重要的参数之一！
   batch.size对于调优producer吞吐量和延时性能指标都有着非常重要的作用。
   producer会将发往同一分区的多条消息封装进一个batch中，当batch满了的时候producer会发batch中的所有消息。
   不过，producer并不总是等待batch满了才发送消息，
   超过消息发送延迟时间(linger.ms参数控制)producer就发送该batch，即使batch还有很多空闲空间。
   显然，batch的大小就显得非常重要。
   通常来说，一个小的batch中包含的消息数很少，因而一次发送请求能够写入的消息数也很少，producer的吞吐量就会很低。
   但若一个batch非常巨大，那么会给内存使用带来极大的压力，因为不管能否被填满，producer都会为该batch分配固定大小的内存。
   当分区较多时，内存会被迅速消耗，会阻塞producer继续将消息写入缓存且batch内存使用率也不高。
   因此，batch.size参数的设置其实是一种时间与空间权衡的体现。


10.linger.ms参数怎么理解？
    linger.ms参数就是控制消息发送延时行为的。该参数默认值是0，表示消息需要被立即发送，无须关心batch是否已被填满，
    大多数情况下这是合理的，毕竟我们总是希望消息被尽可能快地发送。
    不过这样做会拉低producer吞吐量，毕竟producer的每次发送请求中包含的消息数越多，producer就越能将发送请求的开销
    摊薄到更多的消息上，从而提升吞吐量。
	
